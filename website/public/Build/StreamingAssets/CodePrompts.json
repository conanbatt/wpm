{
    "prompts": [
        {
            "name": "isUniqueFunction",
            "lines": [
                "function isUnique(str) {",
                "let charSet = new Set();",
                "for (let i = 0; i < str.length; i++) {",
                "if (charSet.has(str[i])) {",
                "return false;",
                "}",
                "charSet.add(str[i]);",
                "}",
                "return true;",
                "}"
            ]
        },
        {
            "name": "rotateMatrix",
            "lines": [
                "function rotateMatrix(matrix) {",
                "const n = matrix.length;",
                "for (let layer = 0; layer < Math.floor(n / 2); layer++) {",
                "let first = layer;",
                "let last = n - 1 - layer;",
                "for (let i = first; i < last; i++) {",
                "let offset = i - first;",
                "let top = matrix[first][i];",
                "matrix[first][i] = matrix[last - offset][first];",
                "matrix[last - offset][first] = matrix[last][last - offset];",
                "matrix[last][last - offset] = matrix[i][last];",
                "matrix[i][last] = top;",
                "}",
                "}",
                "return matrix;",
                "}"
            ]
        },
        {
            "name": "linkedListClass",
            "lines": [
                "class Node {",
                "constructor(data) {",
                "this.data = data;",
                "this.next = null;",
                "}",
                "}",
                "class LinkedList {",
                "constructor() {",
                "this.head = null;",
                "}",
                "append(data) {",
                "if (this.head === null) {",
                "this.head = new Node(data);",
                "return;",
                "}",
                "let current = this.head;",
                "while (current.next !== null) {",
                "current = current.next;",
                "}",
                "current.next = new Node(data);",
                "}",
                "}"
            ]
        },
        {
            "name": "signupForm",
            "lines": [
                "import React, { useState } from 'react';",
                "const SignupForm = () => {",
                "const [formData, setFormData] = useState({",
                "email: '',",
                "password: ''",
                "});",
                "const [submitted, setSubmitted] = useState(false);",
                "const handleChange = (e) => {",
                "setFormData({",
                "...formData,",
                "[e.target.name]: e.target.value",
                "});",
                "};",
                "const handleSubmit = (e) => {",
                "e.preventDefault();",
                "setSubmitted(true);",
                "};",
                "return (",
                "<div>",
                "{submitted ? (",
                "<h2>Signup successful!</h2>",
                ") : (",
                "<form onSubmit={handleSubmit}>",
                "<div>",
                "<label>Email</label>",
                "<input type=\"email\" name=\"email\" value={formData.email} onChange={handleChange} required />",
                "</div>",
                "<div>",
                "<label>Password</label>",
                "<input type=\"password\" name=\"password\" value={formData.password} onChange={handleChange} required />",
                "</div>",
                "<button type=\"submit\">Sign Up</button>",
                "</form>",
                ")}",
                "</div>",
                ");",
                "};"
            ]
        }
    ]
}
