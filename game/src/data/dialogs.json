[
  {
    "id": 1,
    "title": "test",
    "language": "js",
    "blocks": [
      "function isUnique(str) {\n",
      "    const charSet = new Set();\n",
      "        if (charSet.has(char)) return false;\n",
      "        charSet.add(char);\n",
      "    }\n",
      "    return true;\n",
      "}\n"
    ]
  },
  {
    "id": 2,
    "title": "removeDups",
    "language": "js",
    "blocks": [
      "function removeDups(head) {\n",
      "    const seen = new Set();\n",
      "    let current = head;\n",
      "    let prev = null;\n",
      "    while (current) {\n",
      "        if (seen.has(current.val)) {\n",
      "            prev.next = current.next;\n",
      "        } else {\n",
      "            seen.add(current.val);\n",
      "            prev = current;\n",
      "        }\n",
      "        current = current.next;\n",
      "    }\n",
      "}\n"
    ]
  },
  {
    "id": 3,
    "title": "routeBetweenNodes",
    "language": "js",
    "blocks": [
      "function routeBetweenNodes(graph, start, end) {\n",
      "    if (start === end) return true;\n",
      "    const visited = new Set();\n",
      "    const queue = [start];\n",
      "    while (queue.length > 0) {\n",
      "        const node = queue.shift();\n",
      "        if (node === end) return true;\n",
      "        visited.add(node);\n",
      "        for (let neighbor of graph[node] || []) {\n",
      "            if (!visited.has(neighbor)) queue.push(neighbor);\n",
      "        }\n",
      "    }\n",
      "    return false;\n",
      "}\n"
    ]
  },

  {
    "id": 4,
    "title": "insertion",
    "language": "js",
    "blocks": [
      "function insertion(N, M, i, j) {\n",
      "    const allOnes = ~0;\n",
      "    const left = allOnes << (j + 1);\n",
      "    const right = (1 << i) - 1;\n",
      "    const mask = left | right;\n",
      "    const nCleared = N & mask;\n",
      "    const mShifted = M << i;\n",
      "    return nCleared | mShifted;\n",
      "        this.sizes[stackNum]++;\n",
      "        this.sizes[stackNum]++;\n",
      "}\n"
    ]
  },

  {
    "id": 5,
    "title": "getPermutations",
    "language": "js",
    "blocks": [
      "function getPermutations(str) {\n",
      "    if (str.length === 0) return [''];\n",
      "    const permutations = [];\n",
      "    const firstChar = str[0];\n",
      "    const rest = str.slice(1);\n",
      "    const words = getPermutations(rest);\n",
      "    for (let word of words) {\n",
      "        for (let i = 0; i <= word.length; i++) {\n",
      "            const newWord = word.slice(0, i) + firstChar + word.slice(i);\n",
      "            permutations.push(newWord);\n",
      "        }\n",
      "    }\n",
      "    return permutations;\n",
      "}\n"
    ]
  },

  {
    "id": 6,
    "title": "sortedMerge",
    "language": "js",
    "blocks": [
      "function sortedMerge(A, B) {\n",
      "    let indexA = A.length - 1;\n",
      "    let indexB = B.length - 1;\n",
      "    let indexMerged = A.length + B.length - 1;\n",
      "    A.length = A.length + B.length;\n",
      "    while (indexB >= 0) {\n",
      "        if (indexA >= 0 && A[indexA] > B[indexB]) {\n",
      "            A[indexMerged--] = A[indexA--];\n",
      "        } else {\n",
      "            A[indexMerged--] = B[indexB--];\n",
      "        }\n",
      "    }\n",
      "}\n"
    ]
  },
  {
    "id": 7,
    "title": "getPermutations",
    "language": "js",
    "blocks": [
      "    const n = matrix.length;\n",
      "    for (let layer = 0; layer < Math.floor(n / 2); layer++) {\n",
      "        const first = layer;\n",
      "        const last = n - 1 - layer;\n",
      "        for (let i = first; i < last; i++) {\n",
      "            const offset = i - first;\n",
      "            const top = matrix[first][i];\n",
      "            matrix[first][i] = matrix[last - offset][first];\n",
      "            matrix[last - offset][first] = matrix[last][last - offset];\n",
      "            matrix[last][last - offset] = matrix[i][last];\n",
      "            matrix[i][last] = top;\n",
      "        }\n",
      "    }\n",
      "    return matrix;\n",
           "}\n"
    ]
  }

]
